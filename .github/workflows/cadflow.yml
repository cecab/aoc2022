name: CAD flow

on:
  workflow_dispatch:
    inputs:
      select_issues:
        description: 'Issue numbers to be deployed'
        required: true
        type: string

      review-env:
        description: Which cluster?
        required: true
        type: choice
        options:
          - cad-designer-a.flowniq.com
          - cad-designer-b.flowniq.com
          - cad-designer-c.flowniq.com
          
jobs:
  merge-compile:
    name: "Merge and compile the issues : ${{inputs.select_issues}}"
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      CAD_BRANCH: ${{ steps.cad-merge.outputs.cad_branch }}
    steps:
      - uses: actions/checkout@v3      
      - name: Get review ID
        id: review-name
        run: |
          echo "Env choosen ${{ steps.review-name.outputs.review_id }}"
          echo "review_id=`echo ${{ inputs.review-env }} | sed -e 's/.*designer-\([a-z]*\).*/\1/g'`" >> $GITHUB_OUTPUT
      - name: Show the var
        run: |
          echo "Env choosen ${{ steps.review-name.outputs.review_id }}" 
      - name: "Merge all issues"
        id: cad-merge
        run: |
          set -x
          git fetch --unshallow origin
          git branch -a
          cad_branch="cad-$GITHUB_RUN_ID"
          echo "Starting branch to merge all issues, from origin/main"
          git checkout -b ${cad_branch} origin/main
          # Identification for Git operations
          git config user.email "ccastill100@gmail.com"
          git config user.name "Cesar CI"

          branches=""
          for issue in ${{inputs.select_issues}} ; do
             echo "Resolving branch for issue $issue"
             issue_branch=`git branch -a | grep -- "issue-${issue}" | tr -d " "`
             branches="${branches} $issue_branch"
          done

          for branch in $branches ; do
             echo " === Changes branch $branch === "
             git log --oneline ${base_commit}..$branch
          done 

          echo "merging for $branches"
          git merge --log -m "CAD merge deploy for github ID $GITHUB_RUN_ID" $branches
          git push origin HEAD:$cad_branch
          gh pr create --title "CAD deploy and Merge - $cad_branch"  --body "Branches are:  $branches" -B main
          echo "cad_branch=${cad_branch}" >> $GITHUB_OUTPUT

      - name: "Show PRs"
        run: |
          env
          gh auth status
          gh pr ls
        
  deploy-merge:
    name: "Deploy and merge"
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}    
    needs: merge-compile
    steps:
      - uses: actions/checkout@v3
      - name: "Merge the PR"
        run: |
          # We can check the URL about.json before the merge...
          gh  pr merge -m  ${{ needs.merge-compile.outputs.CAD_BRANCH}}
          echo "Branch to merge: ${{ needs.merge-compile.outputs.CAD_BRANCH}}"
      
    
    
